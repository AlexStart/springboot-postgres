server.port=9091

#spring.datasource.url=jdbc:h2:mem:testdb;MODE=MYSQL
spring.datasource.url=jdbc:h2:mem:user_db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MODE=MYSQL
spring.datasource.platform=h2
spring.jpa.hibernate.ddl-auto=none
spring.datasource.continue-on-error=true

##################### Simplest solution: ################################

#1) in src/main/resources have application.properties (production config):

#spring.datasource.url=jdbc:mysql://localhost:3306/somedb
#spring.datasource.username=root
#spring.datasource.password=password
#spring.datasource.driverClassName=com.mysql.jdbc.Driver
#spring.jpa.database-platform = org.hibernate.dialect.MySQL5Dialect
#and application-test.properties with HSQL config like:

#spring.jpa.hibernate.ddl-auto = create-drop
#spring.jpa.database = HSQL
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.HSQLDialect
#spring.datasource.driverClassName = org.hsqldb.jdbcDriver
#spring.datasource.url: jdbc:hsqldb:mem:scratchdb
#spring.datasource.username = sa
#spring.datasource.password =
#2) Add HSQL dependency in pom.xml if you don't have it already.

#3) Annotate your test class with @ActiveProfiles("test").

#Worked like charm in my case.

#### Another approach is to add the annotation @AutoConfigureTestDatabase to you test class. My tests usually look like this:

#@RunWith(SpringRunner.class)
#@DataJpaTest
#@AutoConfigureTestDatabase(connection = EmbeddedDatabaseConnection.H2)
#public class MyRepositoryTest {

#    @Autowired
#    MyRepository repository;

 #   @Test
 #   public void test() throws Exception {
#        // Tests...
 #   }
#}