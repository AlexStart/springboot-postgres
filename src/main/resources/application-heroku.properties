server.port=${SERVER_PORT}

spring.datasource.url= ${SPRING_DATASOURCE_URL}
spring.datasource.user=${SPRING_DATASOURCE_USER}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=${SPRING_DATASOURCE_DIRVER-CLASS-NAME}

#spring.jpa.database-platform=${SPRING_JPA_DATABASE-PLATFORM}
#spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL-AUTO}

#DB Migration
flyway.locations=db/migration
management.security.enabled=false

######## Hibernate ########
# The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
# Show or not log for each sql query
#spring.jpa.properties.hibernate.show_sql=true
#?
#spring.jpa.properties.hibernate.use_sql_comments=true
#?
#spring.jpa.properties.hibernate.format_sql=true
# Hibernate ddl auto (create, create-drop, update)
#spring.jpa.hibernate.ddl-auto=validate
#?
#entitymanager.packagesToScan: my.springboot.mysql

#spring.datasource.username=root
#spring.datasource.password=root
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect

#DB Migration
#flyway.locations=db/migration/mysql
#management.security.enabled=false

#server.port=9091

######## Hibernate ########
# The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
# Show or not log for each sql query
#spring.jpa.properties.hibernate.show_sql=true
#?
#spring.jpa.properties.hibernate.use_sql_comments=true
#?
#spring.jpa.properties.hibernate.format_sql=true
# Hibernate ddl auto (create, create-drop, update)
#spring.jpa.hibernate.ddl-auto=validate
#?
#entitymanager.packagesToScan: my.springboot.mysql

##################### Simplest solution: ################################

#1) in src/main/resources have application.properties (production config):

#spring.datasource.url=jdbc:mysql://localhost:3306/somedb
#spring.datasource.username=root
#spring.datasource.password=password
#spring.datasource.driverClassName=com.mysql.jdbc.Driver
#spring.jpa.database-platform = org.hibernate.dialect.MySQL5Dialect
#and application-test.properties with HSQL config like:

#spring.jpa.hibernate.ddl-auto = create-drop
#spring.jpa.database = HSQL
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.HSQLDialect
#spring.datasource.driverClassName = org.hsqldb.jdbcDriver
#spring.datasource.url: jdbc:hsqldb:mem:scratchdb
#spring.datasource.username = sa
#spring.datasource.password =
#2) Add HSQL dependency in pom.xml if you don't have it already.

#3) Annotate your test class with @ActiveProfiles("test").

#Worked like charm in my case.

#### Another approach is to add the annotation @AutoConfigureTestDatabase to you test class. My tests usually look like this:

#@RunWith(SpringRunner.class)
#@DataJpaTest
#@AutoConfigureTestDatabase(connection = EmbeddedDatabaseConnection.H2)
#public class MyRepositoryTest {

#    @Autowired
#    MyRepository repository;

 #   @Test
 #   public void test() throws Exception {
#        // Tests...
 #   }
#}