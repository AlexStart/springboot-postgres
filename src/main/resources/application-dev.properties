server.port=9091

spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=create-drop
spring.database.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/user_db
spring.datasource.username=postgres
spring.datasource.password=alex

#spring.datasource.url= jdbc:postgresql://localhost:5432/user_db
#spring.datasource.username=postgres
#spring.datasource.password=alex
#spring.datasource.driver-class-name=org.postgresql.Driver

#DB Migration
flyway.locations=db/migration
management.security.enabled=false

######## Hibernate ########
### The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
### Show or not log for each sql query
#spring.jpa.properties.hibernate.show_sql=true
###?
#spring.jpa.properties.hibernate.use_sql_comments=true
###?
#spring.jpa.properties.hibernate.format_sql=true
### Hibernate ddl auto (create, create-drop, update)
#spring.jpa.hibernate.ddl-auto=create-drop
###?
#entitymanager.packagesToScan: my.springboot.postgres



#????????????????????????????????????????????????????
# Show or not log for each sql query
#spring.jpa.show-sql = true

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# Hibernate ddl auto (create, create-drop, update)
#spring.jpa.hibernate.ddl-auto = update

# Naming strategy
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Hibernate
#hibernate.dialect: org.hibernate.dialect.MySQL5Dialect
#hibernate.show_sql: true
#hibernate.hbm2ddl.auto: create
#entitymanager.packagesToScan: netgloo
